version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: carbon_marketplace_db
    environment:
      POSTGRES_DB: carbon_marketplace
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - carbon_marketplace_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: carbon_marketplace_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - carbon_marketplace_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: carbon_marketplace_backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/carbon_marketplace
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-here
      PORT: 3001
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - carbon_marketplace_network
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: carbon_marketplace_frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_SUI_NETWORK: testnet
      REACT_APP_SUI_RPC_URL: https://fullnode.testnet.sui.io:443
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - carbon_marketplace_network
    command: npm run dev

  # Mobile App (React Native)
  mobile:
    build:
      context: ./mobile
      dockerfile: Dockerfile
    container_name: carbon_marketplace_mobile
    environment:
      REACT_APP_API_URL: http://localhost:3001
    ports:
      - "8081:8081"
    volumes:
      - ./mobile:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - carbon_marketplace_network
    command: npm start

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: carbon_marketplace_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - carbon_marketplace_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: carbon_marketplace_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - carbon_marketplace_network

  # IPFS Node (for decentralized storage)
  ipfs:
    image: ipfs/kubo:latest
    container_name: carbon_marketplace_ipfs
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - carbon_marketplace_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: carbon_marketplace_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - carbon_marketplace_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  ipfs_data:

networks:
  carbon_marketplace_network:
    driver: bridge 