// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  walletAddress     String   @unique
  username          String?  @unique
  firstName         String?
  lastName          String?
  avatar            String?
  phone             String?
  country           String?
  organization      String?
  role              UserRole @default(PROJECT_DEVELOPER)
  verificationStatus VerificationStatus @default(PENDING)
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)
  twoFactorEnabled  Boolean  @default(false)
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  projects          Project[]
  verifications     Verification[]
  transactions      Transaction[]
  bids              AuctionBid[]
  notifications     Notification[]
  apiKeys           ApiKey[]

  @@map("users")
}

model Project {
  id                    String   @id @default(cuid())
  name                  String
  description           String
  projectType           ProjectType
  location              String
  latitude              Float
  longitude             Float
  methodology           String
  expectedLifetime      Int      // in years
  monitoringFrequency   Int      // in days
  status                ProjectStatus @default(DRAFT)
  ownerId               String
  verifierId            String?
  totalCreditsGenerated BigInt   @default(0)
  totalCreditsRetired   BigInt   @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Blockchain data
  suiObjectId          String?  @unique
  suiVersion           String?

  // Relations
  owner                User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  verifier             User?    @relation(fields: [verifierId], references: [id])
  credits              CarbonCredit[]
  verifications        Verification[]
  documents            ProjectDocument[]

  @@map("projects")
}

model CarbonCredit {
  id                    String   @id @default(cuid())
  projectId             String
  amount                BigInt   // in kg CO2 equivalent
  vintageYear           Int
  methodology           String
  verificationStatus    VerificationStatus @default(PENDING)
  verificationData      String?  // IPFS hash or sensor data
  coBenefits            String[] // SDG alignment, biodiversity, etc.
  location              String
  pricePerTon           BigInt   // in USDC cents
  retired               Boolean  @default(false)
  retiredAt             DateTime?
  retiredBy             String?
  createdAt             DateTime @default(now())
  verifiedAt            DateTime?

  // Blockchain data
  suiObjectId           String?  @unique
  suiVersion            String?

  // Relations
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  listings              CreditListing[]
  auctions              CreditAuction[]
  transactions          Transaction[]
  verifications         Verification[]

  @@map("carbon_credits")
}

model Verification {
  id                    String   @id @default(cuid())
  projectId             String
  creditId              String?
  dataType              VerificationDataType
  dataHash              String
  coordinates           Json     // {lat: number, lng: number}
  confidenceScore      Int      // 0-100
  verifiedById          String
  status                VerificationStatus @default(PENDING)
  notes                 String?
  createdAt             DateTime @default(now())

  // Relations
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  credit                CarbonCredit? @relation(fields: [creditId], references: [id])
  verifiedBy            User     @relation(fields: [verifiedById], references: [id])

  @@map("verifications")
}

model CreditListing {
  id                    String   @id @default(cuid())
  creditId              String
  sellerId              String
  pricePerTon           BigInt   // in USDC cents
  totalAmount           BigInt   // in kg CO2
  availableAmount       BigInt   // in kg CO2
  expiresAt             DateTime
  active                Boolean  @default(true)
  createdAt             DateTime @default(now())

  // Relations
  credit                CarbonCredit @relation(fields: [creditId], references: [id], onDelete: Cascade)
  seller                User     @relation(fields: [sellerId], references: [id])

  @@map("credit_listings")
}

model CreditAuction {
  id                    String   @id @default(cuid())
  creditId              String
  sellerId              String
  startingPrice         BigInt   // in USDC cents per ton
  reservePrice          BigInt   // minimum acceptable price
  totalAmount           BigInt   // in kg CO2
  availableAmount       BigInt   // in kg CO2
  startTime             DateTime
  endTime               DateTime
  highestBid            BigInt   @default(0)
  highestBidderId       String?
  active                Boolean  @default(true)
  createdAt             DateTime @default(now())

  // Relations
  credit                CarbonCredit @relation(fields: [creditId], references: [id], onDelete: Cascade)
  seller                User     @relation(fields: [sellerId], references: [id])
  highestBidder         User?    @relation(fields: [highestBidderId], references: [id])
  bids                  AuctionBid[]

  @@map("credit_auctions")
}

model AuctionBid {
  id                    String   @id @default(cuid())
  auctionId             String
  bidderId              String
  amount                BigInt   // in USDC cents
  createdAt             DateTime @default(now())

  // Relations
  auction               CreditAuction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder                User     @relation(fields: [bidderId], references: [id])

  @@map("auction_bids")
}

model Transaction {
  id                    String   @id @default(cuid())
  creditId              String
  buyerId               String
  sellerId              String
  amount                BigInt   // in kg CO2
  pricePerTon           BigInt   // in USDC cents
  totalPrice            BigInt   // in USDC cents
  transactionType       TransactionType
  status                TransactionStatus @default(PENDING)
  usdcTransactionId     String?
  createdAt             DateTime @default(now())
  completedAt           DateTime?

  // Relations
  credit                CarbonCredit @relation(fields: [creditId], references: [id])
  buyer                 User     @relation(fields: [buyerId], references: [id])
  seller                User     @relation(fields: [sellerId], references: [id])

  @@map("transactions")
}

model ProjectDocument {
  id                    String   @id @default(cuid())
  projectId             String
  name                  String
  type                  DocumentType
  url                   String
  ipfsHash              String?
  size                  Int?
  mimeType              String?
  uploadedById          String
  createdAt             DateTime @default(now())

  // Relations
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy            User     @relation(fields: [uploadedById], references: [id])

  @@map("project_documents")
}

model Notification {
  id                    String   @id @default(cuid())
  userId                String
  type                  NotificationType
  title                 String
  message               String
  data                  Json?
  read                  Boolean  @default(false)
  createdAt             DateTime @default(now())

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ApiKey {
  id                    String   @id @default(cuid())
  userId                String
  name                  String
  key                   String   @unique
  permissions           String[] // Array of permission strings
  isActive              Boolean  @default(true)
  lastUsedAt            DateTime?
  expiresAt             DateTime?
  createdAt             DateTime @default(now())

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// Enums
enum UserRole {
  PROJECT_DEVELOPER
  CORPORATE_BUYER
  VERIFIER
  ADMIN
}

enum ProjectType {
  REFORESTATION
  RENEWABLE_ENERGY
  WASTE_MANAGEMENT
  AGRICULTURE
  OCEAN_CONSERVATION
  URBAN_GREENING
  OTHER
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  SUSPENDED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  UNDER_REVIEW
}

enum VerificationDataType {
  SATELLITE
  SENSOR
  COMMUNITY_REPORT
  FIELD_SURVEY
  DRONE_IMAGERY
}

enum TransactionType {
  DIRECT_SALE
  AUCTION
  RETIREMENT
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum DocumentType {
  PROJECT_PROPOSAL
  VERIFICATION_REPORT
  MONITORING_DATA
  LEGAL_DOCUMENT
  IMAGE
  OTHER
}

enum NotificationType {
  PROJECT_UPDATE
  CREDIT_GENERATED
  TRANSACTION_COMPLETED
  VERIFICATION_REQUEST
  AUCTION_UPDATE
  SYSTEM_ALERT
} 